{"version":3,"sources":["components/User.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["User","props","react_default","a","createElement","href","email","name","TodoItem","key","id","title","components_User","author","completed","TodoList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loaded","responses","sort","bind","assertThisInitialized","_this2","data","forEach","item","request","XMLHttpRequest","open","concat","addEventListener","JSON","parse","response","todos","users","setState","send","event","sortBy","target","innerText","toLowerCase","_this3","todosComponents","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","todoItem","value","isCompleted","user","find","userId","userName","userEmail","push","components_TodoItem","_iterator","Symbol","iterator","next","done","err","return","b","localeCompare","className","onClick","React","Component","App","list","display","getData","classList","add","components_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93870d7f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction User(props) {\r\n  return(\r\n      <td><a href = {'mailto:' + props.email}>{props.name}</a></td>\r\n  )\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport User from './User';\r\n\r\nfunction TodoItem(props) {\r\n  let key = 0;\r\n  key++;\r\n  return(\r\n    <tr key = {key}>\r\n      <td>{props.id}</td>\r\n      <td>{props.title}</td>\r\n      <User name = {props.author} email = {props.email}/>\r\n      <td>{props.completed}</td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport '../css/todoList.css'\r\n\r\nclass TodoList extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      loaded: false,\r\n      responses: null\r\n    }\r\n    this.sort = this.sort.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const requests = ['todos', 'users'];\r\n    const data = {};\r\n    \r\n    requests.forEach((item) => {\r\n      const request = new XMLHttpRequest();\r\n      request.open('GET', `https://jsonplaceholder.typicode.com/${item}`);\r\n      request.addEventListener('load', () => {\r\n      data[item] = JSON.parse(request.response);\r\n        if (data.todos && data.users) {\r\n          this.setState({\r\n            loaded: true,\r\n            responses: data\r\n          });\r\n        }\r\n      });\r\n      request.send();\r\n    })\r\n  }\r\n\r\n  sort(event) {\r\n    this.setState({\r\n      sortBy: event.target.innerText.toLowerCase()\r\n    });\r\n  }\r\n\r\n  render () {\r\n    const todosComponents = [];\r\n\r\n    if (this.state.loaded) {\r\n      for (const todoItem of this.state.responses.todos) {\r\n        const isCompleted = todoItem.completed ? 'completed' : 'not completed'\r\n        const user = this.state.responses.users.find(user => user.id === todoItem.userId);\r\n        const userName = user.name;\r\n        const userEmail = user.email;\r\n\r\n      todosComponents.push(\r\n        <TodoItem id = {todoItem.id}\r\n          title = {todoItem.title}\r\n          author = {userName}\r\n          email = {userEmail}\r\n          completed = {isCompleted}\r\n          key = {todoItem.id}\r\n         />\r\n      );\r\n    }\r\n    if (this.state.sortBy === 'title' || this.state.sortBy === 'author' || this.state.sortBy === 'completed') {\r\n      todosComponents.sort((a,b) => a.props[this.state.sortBy].localeCompare(b.props[this.state.sortBy]));\r\n    }\r\n  } else {\r\n    return (\r\n      <div>Loading...</div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <table className='table'>\r\n      <thead>\r\n        <tr onClick = {this.sort}>\r\n          <th>id</th>\r\n          <th>Title</th>\r\n          <th>Author</th>\r\n          <th>Completed</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {todosComponents}\r\n      </tbody>\r\n    </table>\r\n   )\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\nimport TodoList from \"./components/TodoList\";\nimport \"./App.css\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      list: false,\n      display: 'invisible'\n    }\n\n    this.getData = this.getData.bind(this)\n  }\n\n  getData(event) {\n    event.target.classList.add(this.state.display);\n    this.setState({\n      list: true,\n    });\n  }\n  \n  render() {\n    return(\n      <div>\n        <button className = \"get\" onClick = {this.getData}>Get data</button>\n        {this.state.list ? <TodoList />: null}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}